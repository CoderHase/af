#!/usr/bin/gawk -E
#

#
#   restore-files - restore files from an af archive.
#   Copyright (C) 2019-2024  Wolfgang Zekoll, <wzk@quietsche-entchen.de>
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <https://www.gnu.org/licenses/>.
#


BEGIN {
	maxArg = 20;
	maxLen = 8000;

	cpFlags = "--preserve=timestamps";

	#cmd = "id -u";  cmd | getline line;  close(cmd);
	cmd = "pwd; id -u";  cmd | getline PWD;  cmd | getline line;
	close (cmd);
	if (line == "0") {
		isRoot = 1;
		cpFlags = "--preserve=all";
		}

	cmd = "whoami";  cmd | getline line;  close(cmd);
	self = noctrl(line);
	}



function skipws(line) {
	sub(/^[ \t\r\n]+/, "", line);
	return (line);
	}

function noctrl(line) {
	sub(/[ \t\r\n]+$/, "", line);
	return (line);
	}

function sq(string) {
	gsub(/'/, "'\\''", string);
	string = "'" string "'";
	return (string);
	}

function dq(s) {
	gsub(/\\"`/, "\\&", s);
	s = "\"" s "\"";
	return (s);
	}

function sq2(s,   i, d) {
	if (useShellVar != 0  &&  s !~ /[\\\$]/) {
		for (i = 1; i <= _sqc; i++) {
			if (substr(s, _sqLen[i]+1, 1) == "/"  &&
			    substr(s, 1, _sqLen[i]) == _sqPath[i])
				d = dq( "${" _sqName[i] "}/" substr(s, _sqLen[i] + 2));
			else if (s == sqPath[i])
				d = dq( "${" _sqName[i] "}/");
			}
		}

	if (d == "")
		d = sq(s);

	return (d);
	}

function sq2dir(var, val) {
	if (val == ""  ||  val == "/")
		return;

	_sqc++;
	_sqName[_sqc] = var;
	_sqLen[_sqc]  = length(val);
	_sqPath[_sqc] = val;

	SQ2 = SQ2 sprintf ("%s=%s  ||  exit 1\n", var, sq(val));
	}


function bn(fn) {
	sub(/^.*\//, "", fn);
	return (fn);
	}

function dn(fn) {
	if (index(fn, "/") == 0)
		return ("");

	sub(/\/[^\/]*$/, "", fn);
	return (fn);
	}



function initOperations(   I) {
	if (useShellVar == 0)
		return ("");

	I = SQ2;
	if (I != "")
		I = I "\n";

	return (I);
	}


function getEol(   p) {
	p = ";\n";
	return (p);
	}

function addPerm(fn, permSet, ownerSet,   p) {
	if ((p = sbuf[FPERM]) != "")
		permSet[p, fn] = 1;

	if ((p = sbuf[FUSER] "." sbuf[FGROUP]) != ".")
		ownerSet[p] = ownerSet[p] fn "\n";
	}

function addDir(dir, sbuf,   p, parent, x) {
	if (! (dir in haveDir)) {
		parent = dn(dir);
		if (parent != ""  &&  parent != "/"  &&  parent != ".")
			addDir(parent);

		fops["mkdir"] = fops["mkdir"] dir "\n";
		haveDir[dir] = 1;
		}

	if (sbuf[FNAME] != "")
		addPerm(dir, permSet, ownerSet);

	return (0);
	}

function addFile(src, dst, sbuf,   dir) {
	dir = dn(dst);
	addDir(dir);

	if (multifile != 0  &&  bn(src) == bn(dst))
		flist[dir] = flist[dir] src "\n";
	else
		fops["cp"] = fops["cp"] src "\t" dst "\n";

	addPerm(dst, permSet, ownerSet);
	}

function getOperations(cmd,   i, n, p, x, y, S) {
	n = split(fops[cmd], x, "\n");
	for (i = 1; i <= n; i++) {
		if (x[i] == "")
			continue;

		if (cmd == "cp") {
			split(x[i], y, "\t");
			p = sprintf ("cp %s %s %s", cpFlags,
				sq2(y[1]), sq2( DEST == ""? y[2]: DEST "/" y[2]));
			}
		else if (cmd == "mkdir") {
			p = sprintf ("mkdir -p %s  ||  exit 1",
					sq2( DEST == ""? x[i]: DEST "/" x[i] ));
			}

		S = S p "\n";
		}

	return (S);
	}


#
# Take command line arguments from argv[1 .. argc] until either maxArg
# or maxLen is reached.
#

function getParameter(argc, argv, isDest,   k, n, len, p, par) {
	if ((k = argv[0]) == 0)
		k = 1;

	while (k <= argc  &&  n < maxArg  &&  len < maxLen) {
		if ((p = argv[k++]) == "")
			continue;

		if (isDest != 0)
			p = DEST "/" p;

		par = par " " sq2(p);
		len += length(p) + 3;
		n++;
		}

	argv[0] = k;
	return (par);
	}


function getperm(perm,   i, n, p, s, x) {
	n = split("u g o", x, " ");
	p = ""
	for (i=1; i <= n; i++) {
		s = substr(perm, 2 + (i-1) * 3, 3);
		gsub(/-/, "", s);
		p = p "," sprintf ("%c=%s", x[i], s);
		}

	p = substr(p, 2);
	return (p);
	}

function __getChmod(set,   i, n, x, perm, argc, argv, S) {
	n = asorti(set, x);
	for (i = 1; i <= n; i++) {
		perm = x[i];
#print perm, set[perm] >>STDERR;
		if ((p = noctrl(set[perm])) == "")
			continue;

		argc = split(p, argv, "\n");
		while ((p = getParameter(argc, argv, 1)) != "")
			S = S "chmod " sq( getperm(perm)) p ";\n";
		}

	return (S);
	}

function computeChmod(   i, n, p, x, y, perm, S, D, F) {

	#
	# Take the permission set and create lists of files (F) and
	# directories (D) having the same permissions.
	#

	n = asorti(permSet, x);
	for (i = 1; i <= n; i++) {
		if (x[i] == "")
			continue;

		split(x[i], y, SUBSEP);
		perm = y[1];
		if (substr(y[1], 1, 1) == "d")
			D[perm] = D[perm] y[2] "\n";
		else
			F[perm] = F[perm] y[2] "\n";
		}

	_fileChmod = __getChmod(F);
	_dirChmod = __getChmod(D);
	}


function getChown(   i, n, owner, o, argc, argv, S) {
	n = asorti(ownerSet, owner);
	for (i = 1; i <= n; i++) {
		o = owner[i];
		argc = split( noctrl(ownerSet[o]), argv, "\n");
		while ((p = getParameter(argc, argv, 1)) != "")
			S = S "chown " sq(o) p getEol();
		}

	return (S);
	}

function getDirOperations(   n, x, p, S) {
	if (multidir == 0)
		S = getOperations("mkdir");
	else {
		split(noctrl(fops["mkdir"]), x, "\n");
		n = asort(x);
		while ((p = getParameter(n, x, 1)) != "")
			S = S "mkdir -p" p "  ||  exit 1" getEol();
		}

	return (S);
	}

function getFileOperations(   i, n, p, dst, dir, argc, argv, S) {
	if (multifile == 0)
		S = getOperations("cp");
	else {
		n = asorti(flist, dir);
		for (i = 1; i <= n; i++) {
			dst = DEST == ""? dir[i]: DEST "/" dir[i];
			argc = split( noctrl(flist[ dir[i] ]), argv, "\n");
			while ((p = getParameter(argc, argv, 0)) != "")
				S = S "cp " cpFlags p " " sq2(dst == ""? ".": dst) getEol();
			}
		}

	return (S);
	}


function usage() {

	printf ("\nusage: %s [<options>] <index-file> [<pattern>]\n\n", program);

	printf ("%s creates a list of commands to be done to restore files\n" \
		"from the af(1) archive version described in <index-file>.  The output\n" \
		"must be piped to sh(1) to execute the operations.\n" \
		"\n", program);

	printf ("If one or more <pattern> arguments are given then only files matching one\n" \
		"of the patterns are restored.  If <pattern> is prefixed with a `-' (minus)\n" \
		"then files which match <pattern> are excluded.\n" \
		"\n");

	printf ("Options:\n" \
		"  -b	create backups if restoring overwrites existing files.\n" \
		"  -d <dir>   restore files to <dir>.\n" \
		"  -f	compute commands even if index-file looks bad formatted.\n" \
		"  -o	restore file owner (must be root).\n" \
		"  -p	restore file permissions (modes).\n" \
		"  -s	create one operation per file.\n" \
		"  -u	restore files only if missing or older than copy in archive.\n" \
		"  -x <what>  set operations to exclude:\n" \
		"     d	changing directory permissions.\n" \
		"     p	setting or preserving file permissions.\n" \
		"  -v	create verbose cp(1) commands.\n" \
		"  -z	use a shell variable for the base directory.\n" \
		"\n" \
		"Options -b, -u and -v are implemented as cp(1) options.  If -p is\n" \
		"not set then cp(1) preserves also the file modes.\n" \
		"\n" \
		"The -p option is most useful when restoring from archives where\n" \
		"permissions are not preserved (network directories, MTP devices).\n" \
		"\n");

	exit (0);
	}


function __init() {
	FNAME  = 1;
	FTYPE  = 2;
	FPERM  = 3
	FUSER  = 4;
	FGROUP = 5;
	FSIZE  = 6;
	FTIME  = 7;
	FARC   = 8;

	return (0);
	}

function nextarg(par,   arg) {
	if (argi >= ARGC) {
		printf ("%s: missing argument: %s\n", program, par) >>STDERR;
		exit (1);
		}
		
	arg = ARGV[argi];
	ARGV[argi++] = "";

	return (arg);
	}

BEGIN {
	program = "restore-files";
	OUT = STDERR = "/dev/stderr";

	__init();
	debug         = 0;
	_verbose      = 0;
	multifile     = 1;
	multidir      = 1;
	setFilePerms  = 1;
	forceRestore  = 0;
	createBackups = 0;
	updateFiles   = 0;

	DEST = ".";

	argi = 1;
	if (argi >= ARGC)
		usage();

	if (argi < ARGC  &&  ARGV[argi] !~ /^-/)
		indexTab = nextarg("index file");

	while (argi < ARGC  &&  substr(ARGV[argi], 1, 1) == "-") {
		options = nextarg("option");
		if (options == "--")
			break;

		for (i = 2; i <= length(options); i++) {
			c = substr(options, i, 1);
			if (c == "b")
				createBackups = 1;
			else if (c == "d")
				DEST = nextarg("destination directory");
			else if (c == "f")
				forceRestore = 1;
			else if (c == "o")
				setFileOwner = 1;
			else if (c == "p")
				setFilePerms = 0;
			else if (c == "q")
				_verbose = 0;
			else if (c == "s"  ||  c == "1") {
				multidir  = 0;
				multifile = 0;
				}
			else if (c == "u")
				updateFiles = 1;
			else if (c == "x")
				excludeOptions = nextarg("do-not-restore options")
			else if (c == "z")
				useShellVar = 1;
			else if (c == "v")
				_verbose = 1;
			else {
				printf ("%s: unkown option: -%s\n", program, c) >>STDERR;
				exit (1);
				}
			}
		}

	if (index(excludeOptions, "p") > 0)
		setFilePerms = 0;
	else if (setFilePerms == 0) {
		if (isRoot == 0)
			cpFlags = cpFlags ",mode";
		}

	if (indexTab == "") {
		if (argi >= ARGC) {
			printf ("usage: %s [<options>] <index>\n", program) >>STDERR;
			exit (1);
			}

		indexTab = nextarg("index file");
		}

	gsub(/\/\.\//, "/", indexTab);	# Remove and `/./`
	gsub(/^\.\//, "", indexTab);	# Remove `./` at the beginning.
	# The indextab is in ...
	if (index(indexTab, "/") == 0  ||  indexTab ~ /^\.\/[^\/]+$/)
		baseDir = "..";		# ... the current directory.
	else if (indexTab !~ /^\.\.\//  &&  indexTab ~ /^[^\/].*\/[^\/]+$/)
		baseDir = ".";		# ... in a one-level subdirectory.
	else if (indexTab ~ /^\.\.\//)
		baseDir = dn(dn(indexTab));	# ... somewhere near us.
	else {
		# ... somehere else.  Make it a fullpath an cut
		# indexTab's filename and directory.  Consider to
		# use `-z`.
		if (substr(indexTab, 1, 1) != "/")
			indexTab = PWD "/" indexTab;

		baseDir = dn( dn(indextab) );
		if (baseDir == "")
			baseDir = ".";
		}


	if (length(baseDir) > 20)
		sq2dir("B", baseDir);

	if (length(DEST) > 15)
		sq2dir("D", DEST);


	while (argi < ARGC) {
		p = nextarg("pattern");
		if (substr(p, 1, 1) == "-") {
			if (veto != "")
				veto = veto "|";

			veto = veto substr(p, 2);
			}
		else {
			if (regex != "")
				regex = regex "|";

			regex = regex p;
			}
		}


	while (getline line <indexTab > 0) {
		split(line, sbuf, "\t");

		if (sbuf[1] == "version~") {
			archiveVersion = sbuf[2]+0;
			continue;
			}

		if (regex != 0  &&  sbuf[FNAME] !~ regex)
			continue;
		else if (veto != 0  &&  sbuf[FNAME] ~ veto)
			continue;

		# stat[sbuf[FNAME]] = line;
		if (sbuf[FTYPE] == "d")
			addDir(sbuf[FNAME], sbuf);
		else if (sbuf[FTYPE] == "f") {
			fn = baseDir "/" sbuf[FARC];
			addFile(fn, sbuf[FNAME], sbuf);
			}
		}

	if (archiveVersion == "") {
		printf ("%s: no version information in index, fn= %s\n",
				program, indexTab) >>STDERR;

		if (forceRestore == 0)
			exit (1);
		}

	if (_verbose != 0)
		cpFlags = "-v " cpFlags;

	if (createBackups != 0)
		cpFlags = "-b " cpFlags;

	if (updateFiles != 0)
		cpFlags = "-u " cpFlags;

	computeChmod();
	S = initOperations() \
		getDirOperations() \
		getFileOperations() \

	if (index(excludeOptions, "d") == 0)
		S = S _dirChmod;

	if (setFilePerms != 0)
		S = S _fileChmod;

	if (setFileOwner != 0)
		S = S getChown();

	print S;

	exit (0);
	}

